diff --cc divulgit-remote/src/main/java/org/divulgit/remote/rest/RestCallerConfiguration.java
index b2b04eb,c0c24b3..0000000
--- a/divulgit-remote/src/main/java/org/divulgit/remote/rest/RestCallerConfiguration.java
+++ b/divulgit-remote/src/main/java/org/divulgit/remote/rest/RestCallerConfiguration.java
@@@ -19,17 -16,8 +19,18 @@@ public class RestCallerConfiguration 
      @Bean
      public HeaderAuthRestCaller gitHubRestCaller(RestTemplateCustomizer restTemplateCustomizer) {
          return new HeaderAuthRestCaller(restTemplateCustomizer,
-                 ((headers, token) -> headers.add("Authorization", "token " + token)));
 -            ((headers, authentication) -> headers.add("Authorization","token " + (String) authentication.getCredentials())));
++                ((headers, authentication) -> headers.add("Authorization","token " + (String) authentication.getCredentials())));
 +    }
 +
 +    @Bean
 +    public HeaderAuthRestCaller azureRestCaller(RestTemplateCustomizer restTemplateCustomizer) {
 +        return new HeaderAuthRestCaller(restTemplateCustomizer,
-                 ((headers, token) -> {
-                     String base64Token = Base64.getEncoder().encodeToString((":" + token).getBytes(StandardCharsets.UTF_8)); ;
++                ((headers, authentication) -> {
++                    String base64Token = Base64.getEncoder().encodeToString((":" + (String) authentication.getCredentials()).getBytes(StandardCharsets.UTF_8)); ;
 +                    headers.add("Authorization", "Basic " + base64Token);
 +                }));
      }
  
+     //TODO wesley implementar um metodo igual aos outros aqui, mas adicionando a header do jeito que o bitbucket espera
 +
  }
diff --git a/divulgit-model/src/main/java/org/divulgit/model/Remote.java b/divulgit-model/src/main/java/org/divulgit/model/Remote.java
index c24208f..8bee3a4 100644
--- a/divulgit-model/src/main/java/org/divulgit/model/Remote.java
+++ b/divulgit-model/src/main/java/org/divulgit/model/Remote.java
@@ -18,6 +18,7 @@ public class Remote {
     private String id;
 
     private String url;
+    private String organizationId;
     private RemoteType type;
 
     public Remote(String url) {
diff --git a/divulgit-remote-azure/pom.xml b/divulgit-remote-azure/pom.xml
index 6e9bdd1..5e2f269 100644
--- a/divulgit-remote-azure/pom.xml
+++ b/divulgit-remote-azure/pom.xml
@@ -28,6 +28,11 @@
             <artifactId>divulgit-model</artifactId>
             <version>${project.version}</version>
         </dependency>
+        <dependency>
+            <groupId>br.com.decioluckow</groupId>
+            <artifactId>divulgit-util</artifactId>
+            <version>${project.version}</version>
+        </dependency>
         <dependency>
             <groupId>br.com.decioluckow</groupId>
             <artifactId>divulgit-remote-model</artifactId>
@@ -67,5 +72,4 @@
             <optional>true</optional>
         </dependency>
     </dependencies>
-
-</project>
\ No newline at end of file
+</project>
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureCallerFacade.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureCallerFacade.java
index 137863a..8966e5e 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureCallerFacade.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureCallerFacade.java
@@ -22,6 +22,7 @@ import org.divulgit.remote.model.RemoteProject;
 import org.divulgit.remote.model.RemoteUser;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 @Component
@@ -47,35 +48,35 @@ public class AzureCallerFacade implements RemoteFacade {
     private GitHubCommentService commentService;
 
     @Override
-    public boolean testAPI(Remote remote, String token) throws RemoteException {
-        return testCaller.test(remote, token);
+    public boolean testAPI(Remote remote, Authentication authentication) throws RemoteException {
+        return testCaller.test(authentication);
     }
 
     @Override
-    public Optional<RemoteUser> retrieveRemoteUser(Remote remote, String token) throws RemoteException {
-        return currentUserCaller.retrieveCurrentUser(remote, token);
+    public Optional<RemoteUser> retrieveRemoteUser(Remote remote, Authentication authentication) throws RemoteException {
+        return currentUserCaller.retrieveCurrentUser(authentication);
     }
 
     @Override
-    public List<? extends RemoteProject> retrieveRemoteProjects(Remote remote, String token) throws RemoteException {
-        return projectCaller.retrieveRepositories(remote, token);
+    public List<? extends RemoteProject> retrieveRemoteProjects(Remote remote, Authentication authentication) throws RemoteException {
+        return projectCaller.retrieveRepositories(remote, authentication);
     }
 
     @Override
-    public int retrieveLastMergeRequestExternalId(Remote remote, User user, Project project, String token) throws RemoteException {
-        return lastPullRequestCaller.retrieveLastPullRequestExternalId(remote, user, project, token);
+    public int retrieveLastMergeRequestExternalId(Remote remote, User user, Project project, Authentication authentication) throws RemoteException {
+        return lastPullRequestCaller.retrieveLastPullRequestExternalId(remote, user, project, authentication);
     }
 
 
     @Override
     public List<? extends RemoteMergeRequest> retrieveMergeRequests(Remote remote, User user, Project project, Integer scanFrom,
-    		String token) throws RemoteException {
-    	return pullRequestCaller.retrievePullRequests(remote, user, project, scanFrom, token);
+                                                                    Authentication authentication) throws RemoteException {
+    	return pullRequestCaller.retrievePullRequests(remote, user, project, scanFrom, authentication);
     }
     
     @Override
     public List<? extends RemoteComment> retrieveComments(Remote remote, User user, Project project, MergeRequest mergeRequest,
-    		String token) throws RemoteException {
-    	return commentService.retrieveComments(remote, user, project, mergeRequest, token);
+            Authentication authentication) throws RemoteException {
+    	return commentService.retrieveComments(remote, user, project, mergeRequest, authentication);
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureURLBuilder.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureURLBuilder.java
index 21d4a36..54716f9 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureURLBuilder.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/AzureURLBuilder.java
@@ -66,7 +66,7 @@ public class AzureURLBuilder {
             mergeRequestExternalId);
     }
     
-    public String buildRepository(String organizationId) {
-        return MessageFormat.format("https://dev.azure.com/{0}/_apis/git/repositories?api-version=6.0", organizationId);
+    public String buildRepository(Remote remote, int page) {
+        return MessageFormat.format("https://dev.azure.com/{0}/_apis/git/repositories?api-version=6.0", remote.getOrganizationId());
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/GitHubCommentService.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/GitHubCommentService.java
index e9d53e5..8af34e6 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/GitHubCommentService.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/GitHubCommentService.java
@@ -10,6 +10,7 @@ import org.divulgit.model.User;
 import org.divulgit.remote.exception.RemoteException;
 import org.divulgit.remote.model.RemoteComment;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Service;
 
 @Service
@@ -22,9 +23,9 @@ public class GitHubCommentService {
 	private IssueCommentCaller issueCommentCaller;
 	
     public List<? extends RemoteComment> retrieveComments(Remote remote, User user, Project project, MergeRequest mergeRequest,
-    		String token) throws RemoteException {   	
-    	List<AzureComment> pullRequestComments = pullRequestCommentCaller.retrieveComments(remote, user, project, mergeRequest, token);
-    	List<AzureComment> issueComments = issueCommentCaller.retrieveComments(remote, user, project, mergeRequest, token);
+    		Authentication authentication) throws RemoteException {
+    	List<AzureComment> pullRequestComments = pullRequestCommentCaller.retrieveComments(remote, user, project, mergeRequest, authentication);
+    	List<AzureComment> issueComments = issueCommentCaller.retrieveComments(remote, user, project, mergeRequest, authentication);
     	List<AzureComment> comments = new ArrayList<>();
     	comments.addAll(pullRequestComments);
     	comments.addAll(issueComments);
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/IssueCommentCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/IssueCommentCaller.java
index 949784b..d11a0cc 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/IssueCommentCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/IssueCommentCaller.java
@@ -16,6 +16,7 @@ import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
@@ -25,13 +26,13 @@ import lombok.extern.slf4j.Slf4j;
 public class IssueCommentCaller {
 
     @Autowired
-    private HeaderAuthRestCaller gitHubRestCaller;
+    private HeaderAuthRestCaller azureRestCaller;
 
     @Autowired
     private AzureCommentResponseHandler responseHandler;
 
     @Autowired
-    @ForRemote(RemoteType.GITHUB)
+    @ForRemote(RemoteType.AZURE)
     private ErrorResponseHandler errorResponseHandler;
 
     @Autowired
@@ -42,9 +43,9 @@ public class IssueCommentCaller {
             User user,
             Project project,
             MergeRequest mergeRequest,
-            String token) throws RemoteException {
+            Authentication authentication) throws RemoteException {
         final List<AzureComment> comments = new ArrayList<>();
-        retrieveComments(remote, user, project, mergeRequest, comments, token, AzureURLBuilder.INITIAL_PAGE);
+        retrieveComments(remote, user, project, mergeRequest, comments, authentication, AzureURLBuilder.INITIAL_PAGE);
         return comments;
     }
 
@@ -54,10 +55,10 @@ public class IssueCommentCaller {
             Project project,
             MergeRequest mergeRequest,
             List<AzureComment> loadedComments,
-            String token,
+            Authentication authentication,
             int page) throws RemoteException {
         final String url = urlBuilder.buildIssueComment(remote, user, project, mergeRequest, page);
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
+        ResponseEntity<String> response = azureRestCaller.call(url, authentication);
         if (response.getStatusCode().is2xxSuccessful()) {
             List<AzureComment> comments = responseHandler.handle200ResponseMultipleResult(response);
             loadedComments.addAll(comments);
@@ -65,7 +66,7 @@ public class IssueCommentCaller {
             errorResponseHandler.handleErrorResponse(response);
         }
         if (LinkHeaderUtil.hasNextPage(response)) {
-            retrieveComments(remote, user, project, mergeRequest, loadedComments, token, ++page);
+            retrieveComments(remote, user, project, mergeRequest, loadedComments, authentication, ++page);
         }
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/PullRequestCommentCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/PullRequestCommentCaller.java
index e627d46..0d1bc47 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/PullRequestCommentCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/comment/PullRequestCommentCaller.java
@@ -16,6 +16,7 @@ import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
@@ -42,9 +43,9 @@ public class PullRequestCommentCaller {
             User user,
             Project project,
             MergeRequest mergeRequest,
-            String token) throws RemoteException {
+            Authentication authentication) throws RemoteException {
         final List<AzureComment> loadedComments = new ArrayList<>();
-        retrieveComments(remote, user, project, mergeRequest, loadedComments, token, AzureURLBuilder.INITIAL_PAGE);
+        retrieveComments(remote, user, project, mergeRequest, loadedComments, authentication, AzureURLBuilder.INITIAL_PAGE);
         return loadedComments;
     }
 
@@ -54,10 +55,10 @@ public class PullRequestCommentCaller {
             Project project,
             MergeRequest mergeRequest,
             List<AzureComment> loadedComments,
-            String token,
+            Authentication authentication,
             int page) throws RemoteException {
         String url = urlBuilder.buildPullRequestComment(remote, user, project, mergeRequest, page);
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
+        ResponseEntity<String> response = gitHubRestCaller.call(url, authentication);
         if (response.getStatusCode().is2xxSuccessful()) {
             List<AzureComment> comments = responseHandler.handle200ResponseMultipleResult(response);
             loadedComments.addAll(comments);
@@ -65,7 +66,7 @@ public class PullRequestCommentCaller {
             errorResponseHandler.handleErrorResponse(response);
         }
         if (LinkHeaderUtil.hasNextPage(response)) {
-            retrieveComments(remote, user, project, mergeRequest, loadedComments, token, ++page);
+            retrieveComments(remote, user, project, mergeRequest, loadedComments, authentication, ++page);
         }
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/error/AzureErrorResponseHandler.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/error/AzureErrorResponseHandler.java
index 1836e8f..fc6b0a1 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/error/AzureErrorResponseHandler.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/error/AzureErrorResponseHandler.java
@@ -20,20 +20,11 @@ public class AzureErrorResponseHandler implements ErrorResponseHandler {
 	
     @Override
     public boolean isErrorResponse(ResponseEntity<String> response) {
-        return response.getBody().contains("message");
+        return response.getStatusCode().value() != 200;
     }
 
     @Override
     public void handleErrorResponse(ResponseEntity<String> response) throws RemoteException {
-        try {
-            final Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
-            final ObjectMapper objectMapper = builder.build();
-            ErrorMessage errorMessage =  objectMapper.readValue(response.getBody(), ErrorMessage.class);
-            throw new RemoteException(errorMessage.getMessage());
-        } catch (JsonProcessingException e) {
-            String message = "Error on converting json to Object";
-            log.error(message + "[json: " + response.getBody() +"]");
-            throw new RemoteException(message, e);
-        }
+        throw new RemoteException(response.getStatusCode().toString());
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/AzurePullRequest.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/AzurePullRequest.java
index 18bf835..7b3467e 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/AzurePullRequest.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/AzurePullRequest.java
@@ -17,23 +17,65 @@ import lombok.NoArgsConstructor;
 @Builder
 @NoArgsConstructor
 @AllArgsConstructor
-public class GitHubPullRequest implements RemoteMergeRequest {
+public class AzurePullRequest implements RemoteMergeRequest {
 
-    private static final String STATE_OPENED = "open";
+    private static final String STATE_ACTIVE = "active";
     private static final String STATE_CLOSED = "closed";
 
-    @JsonProperty("number")
+    /*
+abandoned
+string
+Pull request is abandoned.
+
+active
+string
+Pull request is active.
+
+all
+string
+Used in pull request search criteria to include all statuses.
+
+completed
+string
+Pull request is completed.
+
+notSet
+string
+Status not set. Default state.
+*/
+
+
+
+    @JsonProperty("pullRequestId")
     private int externalId;
     private String title;
-    @JsonProperty("body")
     private String description;
     private AzureUser user;
-    @JsonProperty("html_url")
     private String url;
     private String state;
     @JsonProperty("merged_at")
     private String mergedAt;
 
+    /*
+    {
+        "value": [
+        {
+            "pullRequestId": 1,
+                "status": "active",
+                "createdBy": {
+            "uniqueName": "decioluckow@outlook.com",
+        },
+            "creationDate": "2022-07-02T19:46:34.2134471Z",
+                "title": "teste1 1'",
+                "description": "[1] description do pull request",
+                "mergeStatus": "succeeded",
+
+        }
+    ],
+        "count": 1
+    }
+    */
+
     @Override
     public String getAuthor() {
         return user.getUsername();
@@ -51,7 +93,8 @@ public class GitHubPullRequest implements RemoteMergeRequest {
     }
 
     public MergeRequest.State convertState(String state) {
-        MergeRequest.State mergeRequestState;
+        MergeRequest.State mergeRequestState = null;
+        /*
         if (STATE_OPENED.equals(state))
             mergeRequestState = MergeRequest.State.OPENED;
         else if (STATE_CLOSED.equals(state) && Strings.isEmpty(mergedAt))
@@ -59,6 +102,8 @@ public class GitHubPullRequest implements RemoteMergeRequest {
         else if (STATE_CLOSED.equals(state) && Strings.isNotEmpty(mergedAt))
             mergeRequestState = MergeRequest.State.MERGED;
         else throw new IllegalArgumentException("MergeRequest.State not found for value " + state);
+
+         */
         return mergeRequestState;
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/LastPullRequestCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/LastPullRequestCaller.java
index 6cc8e70..4558744 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/LastPullRequestCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/LastPullRequestCaller.java
@@ -12,6 +12,7 @@ import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 import java.util.List;
@@ -37,13 +38,13 @@ public class LastPullRequestCaller {
             Remote remote,
             User user,
             Project project,
-            String token) throws RemoteException {
+            Authentication authentication) throws RemoteException {
         log.info("Retrieving last pull request id for project {}", project.getId());
         String url = urlBuilder.buildPullRequestsURL(remote, user, project);
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
+        ResponseEntity<String> response = gitHubRestCaller.call(url, authentication);
         int lastMergeRequestId = 0;
         if (response.getStatusCode().is2xxSuccessful()) {
-            List<GitHubPullRequest> pullRequests = responseHandler.handle200ResponseMultipleResult(response);
+            List<AzurePullRequest> pullRequests = responseHandler.handle200ResponseMultipleResult(response);
             if (!pullRequests.isEmpty()) {
                 lastMergeRequestId = pullRequests.get(0).getExternalId();
             }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestResponseHandler.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestResponseHandler.java
index 20fb93b..ddfa07c 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestResponseHandler.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestResponseHandler.java
@@ -17,11 +17,11 @@ import lombok.extern.slf4j.Slf4j;
 @Component
 public class PullRequestResponseHandler {
 	
-    public List<GitHubPullRequest> handle200ResponseMultipleResult(ResponseEntity<String> response) throws RemoteException {
+    public List<AzurePullRequest> handle200ResponseMultipleResult(ResponseEntity<String> response) throws RemoteException {
         try {
             final Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
             final ObjectMapper objectMapper = builder.build();
-            final CollectionType collectionType = objectMapper.getTypeFactory().constructCollectionType(List.class, GitHubPullRequest.class);
+            final CollectionType collectionType = objectMapper.getTypeFactory().constructCollectionType(List.class, AzurePullRequest.class);
             return objectMapper.readValue(response.getBody(), collectionType);
         } catch (JsonProcessingException e) {
             String message = "Error on converting json to Object";
@@ -30,11 +30,11 @@ public class PullRequestResponseHandler {
         }
     }
 
-    public GitHubPullRequest handle200ResponseSingleResult(ResponseEntity<String> response) throws RemoteException {
+    public AzurePullRequest handle200ResponseSingleResult(ResponseEntity<String> response) throws RemoteException {
         try {
             Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
             ObjectMapper objectMapper = builder.build();
-            return objectMapper.readValue(response.getBody(), GitHubPullRequest.class);
+            return objectMapper.readValue(response.getBody(), AzurePullRequest.class);
         } catch (JsonProcessingException e) {
             String message = "Error on converting json to Object";
             log.error(message + "[json: " + response.getBody() + "]");
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestsCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestsCaller.java
index 7e2e781..bfbcfc6 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestsCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/pullrequest/PullRequestsCaller.java
@@ -15,6 +15,7 @@ import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
@@ -36,29 +37,29 @@ public class PullRequestsCaller {
     @Autowired
     private AzureURLBuilder urlBuilder;
 
-    public List<GitHubPullRequest> retrievePullRequests(
+    public List<AzurePullRequest> retrievePullRequests(
             Remote remote,
             User user,
             Project project,
             List<Integer> externalIds,
-            String token) throws RemoteException {
+            Authentication authentication) throws RemoteException {
     	log.info("Retrieving pull requests for {} ids", externalIds.size());
-        final List<GitHubPullRequest> pullRequests = new ArrayList<>();
+        final List<AzurePullRequest> pullRequests = new ArrayList<>();
         for (Integer id : externalIds) {
-        	pullRequests.add(retrievePullRequest(remote, user, project, id, token));
+        	pullRequests.add(retrievePullRequest(remote, user, project, id, authentication));
         }
         return pullRequests;
     }
 
-    public List<GitHubPullRequest> retrievePullRequests(
+    public List<AzurePullRequest> retrievePullRequests(
             Remote remote,
             User user,
             Project project,
             Integer scanFrom,
-            String token) throws RemoteException {
+            Authentication authentication) throws RemoteException {
     	log.info("Retrieving pull requests from number {}", scanFrom);
-        final List<GitHubPullRequest> pullRequests = new ArrayList<>();
-        retrievePullRequests(remote, user, project, pullRequests, scanFrom, token, AzureURLBuilder.INITIAL_PAGE);
+        final List<AzurePullRequest> pullRequests = new ArrayList<>();
+        retrievePullRequests(remote, user, project, pullRequests, scanFrom, authentication, AzureURLBuilder.INITIAL_PAGE);
         return pullRequests;
     }
 
@@ -66,16 +67,16 @@ public class PullRequestsCaller {
             Remote remote,
             User user,
             Project project,
-            List<GitHubPullRequest> loadedPullRequests,
+            List<AzurePullRequest> loadedPullRequests,
             Integer scanFrom,
-            String token,
+            Authentication authentication,
             int page) throws RemoteException {
         final String url = urlBuilder.buildPullRequestsURL(remote, user, project, page);
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
+        ResponseEntity<String> response = gitHubRestCaller.call(url, authentication);
         boolean stopScan = false;
         if (response.getStatusCode().is2xxSuccessful()) {
-            List<GitHubPullRequest> pullRequests = responseHandler.handle200ResponseMultipleResult(response);
-            for (GitHubPullRequest pullRequest : pullRequests) {
+            List<AzurePullRequest> pullRequests = responseHandler.handle200ResponseMultipleResult(response);
+            for (AzurePullRequest pullRequest : pullRequests) {
                 if (pullRequest.getExternalId() >= scanFrom) {
                 	loadedPullRequests.add(pullRequest);
                 } else {
@@ -86,19 +87,19 @@ public class PullRequestsCaller {
             errorResponseHandler.handleErrorResponse(response);
         }
         if (LinkHeaderUtil.hasNextPage(response) && !stopScan) {
-        	retrievePullRequests(remote, user, project, loadedPullRequests, scanFrom, token, ++page);
+        	retrievePullRequests(remote, user, project, loadedPullRequests, scanFrom, authentication, ++page);
         }
     }
 
-    private GitHubPullRequest retrievePullRequest(
+    private AzurePullRequest retrievePullRequest(
             Remote remote,
             User user,
             Project project,
             Integer externalId,
-            String token) throws RemoteException {
+            Authentication authentication) throws RemoteException {
         String url = urlBuilder.buildPullRequestURL(remote, user, project, externalId);
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
-        GitHubPullRequest pullRequest = null;
+        ResponseEntity<String> response = gitHubRestCaller.call(url, authentication);
+        AzurePullRequest pullRequest = null;
         if (response.getStatusCode().is2xxSuccessful()) {
         	pullRequest = responseHandler.handle200ResponseSingleResult(response);
         } else if (errorResponseHandler.isErrorResponse(response)) {
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/AzureRepository.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/AzureRepository.java
index ff023fc..376ab7d 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/AzureRepository.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/AzureRepository.java
@@ -14,12 +14,16 @@ public class AzureRepository implements RemoteProject {
 
     @JsonProperty("id")
     private String externalId;
-    @JsonProperty("html_url")
+    @JsonProperty("webUrl")
     private String url;
     private String name;
-    private String description;
+
+    @Override
+    public String getDescription() {
+        return null;
+    }
 
     public Project convertToProject() {
-        return Project.builder().externalId(externalId).url(url).name(name).description(description).build();
+        return Project.builder().externalId(externalId).url(url).name(name).build();
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryCaller.java
index 7f009fc..e81d9e7 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryCaller.java
@@ -12,7 +12,9 @@ import org.divulgit.remote.rest.HeaderAuthRestCaller;
 import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
@@ -22,36 +24,34 @@ import lombok.extern.slf4j.Slf4j;
 public class RepositoryCaller {
 
     @Autowired
-    private HeaderAuthRestCaller gitHubRestCaller;
+    private HeaderAuthRestCaller azureRestCaller;
 
     @Autowired
     private AzureURLBuilder urlBuilder;
     
     @Autowired
-    @ForRemote(RemoteType.GITHUB)
+    @ForRemote(RemoteType.AZURE)
     private ErrorResponseHandler errorResponseHandler;
     
     @Autowired
     private RepositoryResponseHandler responseHandler;
 
-    public List<AzureRepository> retrieveRepositories(final Remote remote, final String token) throws RemoteException {
+    public List<AzureRepository> retrieveRepositories(final Remote remote, final Authentication authentication) throws RemoteException {
         final List<AzureRepository> projects = new ArrayList<>();
-        retrieveRepositories(remote, token, projects, AzureURLBuilder.INITIAL_PAGE);
+        retrieveRepositories(remote, authentication, projects, AzureURLBuilder.INITIAL_PAGE);
         return projects;
     }
 
-    private void retrieveRepositories(final Remote remote, final String token, final List<AzureRepository> projects, int page) throws RemoteException {
+    private void retrieveRepositories(final Remote remote, final Authentication authentication, final List<AzureRepository> projects, int page) throws RemoteException {
         String url = urlBuilder.buildRepository(remote, page);
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
-        if (response.getStatusCode().is2xxSuccessful()) {
+        ResponseEntity<String> response = azureRestCaller.call(url, authentication);
+        if (response.getStatusCode().value() == HttpStatus.OK.value()) {
             projects.addAll(responseHandler.handle200Response(response));
         } else if (errorResponseHandler.isErrorResponse(response)) {
             errorResponseHandler.handleErrorResponse(response);
         }
         if (LinkHeaderUtil.hasNextPage(response)) {
-        	retrieveRepositories(remote, token, projects, ++page);
+        	retrieveRepositories(remote, authentication, projects, ++page);
         }
     }
-
-
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryResponseHandler.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryResponseHandler.java
index 95745ae..844a445 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryResponseHandler.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/repository/RepositoryResponseHandler.java
@@ -2,9 +2,14 @@ package org.divulgit.azure.repository;
 
 import java.util.List;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.CollectionType;
 import org.divulgit.remote.exception.RemoteException;
+import org.divulgit.util.JSONUtil;
+import org.json.JSONObject;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
 import org.springframework.stereotype.Component;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -14,13 +19,13 @@ import lombok.extern.slf4j.Slf4j;
 @Slf4j
 @Component
 public class RepositoryResponseHandler {
-	
-    @Autowired
-    private RepositoryMapper mapper;
 
     public List<AzureRepository> handle200Response(ResponseEntity<String> response) throws RemoteException {
         try {
-            return mapper.convertToProjects(response.getBody());
+            final Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
+            final ObjectMapper objectMapper = builder.build();
+            final CollectionType collectionType = objectMapper.getTypeFactory().constructCollectionType(List.class, AzureRepository.class);
+            return objectMapper.readValue(JSONUtil.extractContent("value", response.getBody()), collectionType);
         } catch (JsonProcessingException e) {
             String message = "Error on converting json to Object";
             log.error(message + "[json: " + response.getBody() +"]");
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/test/AzureTestCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/test/AzureTestCaller.java
index 3df4a48..89685df 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/test/AzureTestCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/test/AzureTestCaller.java
@@ -7,6 +7,7 @@ import org.divulgit.remote.exception.RemoteException;
 import org.divulgit.remote.rest.HeaderAuthRestCaller;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 @Slf4j
@@ -19,9 +20,9 @@ public class AzureTestCaller {
     @Autowired
     private AzureURLBuilder urlBuilder;
     
-    public boolean test(String token) throws RemoteException {
+    public boolean test(Authentication authentication) throws RemoteException {
         final String url = urlBuilder.buildTestURL();
-        ResponseEntity<String> response = gitHubRestCaller.call(url, token);
+        ResponseEntity<String> response = azureRestCaller.call(url, authentication);
         return response.getStatusCode().is2xxSuccessful();
     }
 }
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureCurrentUserCaller.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureCurrentUserCaller.java
index fe1f96d..825ef84 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureCurrentUserCaller.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureCurrentUserCaller.java
@@ -11,7 +11,9 @@ import org.divulgit.remote.rest.HeaderAuthRestCaller;
 import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.divulgit.type.RemoteType;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
@@ -33,11 +35,11 @@ public class AzureCurrentUserCaller {
     @ForRemote(RemoteType.AZURE)
     private ErrorResponseHandler errorResponseHandler;
 
-    public Optional<RemoteUser> retrieveCurrentUser(String token) throws RemoteException {
+    public Optional<RemoteUser> retrieveCurrentUser(Authentication authentication) throws RemoteException {
         String url = urlBuilder.buildUserURL();
-        ResponseEntity<String> response = azureRestCaller.call(url, token);
+        ResponseEntity<String> response = azureRestCaller.call(url, authentication);
         Optional<RemoteUser> authenticatedUser = Optional.empty();
-        if (response.getStatusCode().is2xxSuccessful()) {
+        if (response.getStatusCode().value() == HttpStatus.OK.value()) {
             authenticatedUser = Optional.ofNullable(responseHandler.handle200Response(response));
         } else if (errorResponseHandler.isErrorResponse(response)) {
             errorResponseHandler.handleErrorResponse(response);
diff --git a/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureUser.java b/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureUser.java
index e667009..2be56a8 100644
--- a/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureUser.java
+++ b/divulgit-remote-azure/src/main/java/org/divulgit/azure/user/AzureUser.java
@@ -10,8 +10,9 @@ import lombok.Data;
 public class AzureUser implements RemoteUser {
     @JsonProperty("id")
     private String internalId;
+    @JsonProperty("displayName")
     private String name;
-    @JsonProperty("login")
+    @JsonProperty("emailAddress")
     private String username;
     @JsonProperty("avatar_url")
     private String avatarURL;
diff --git a/divulgit-remote-azure/src/test/java/org/divulgit/azure/error/ErrorResponseHandlerTest.java b/divulgit-remote-azure/src/test/java/org/divulgit/azure/error/ErrorResponseHandlerTest.java
index f9b919f..ff46f86 100644
--- a/divulgit-remote-azure/src/test/java/org/divulgit/azure/error/ErrorResponseHandlerTest.java
+++ b/divulgit-remote-azure/src/test/java/org/divulgit/azure/error/ErrorResponseHandlerTest.java
@@ -3,6 +3,7 @@ package org.divulgit.azure.error;
 import org.divulgit.remote.exception.RemoteException;
 import org.divulgit.remote.rest.error.ErrorResponseHandler;
 import org.junit.jupiter.api.Test;
+import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 
 import java.io.IOException;
@@ -15,14 +16,12 @@ class ErrorResponseHandlerTest {
 
     @Test
     void testError() throws IOException, RemoteException {
-        InputStream jsonResource = this.getClass().getResourceAsStream("error.json");
-        String json = new String(jsonResource.readAllBytes(), StandardCharsets.UTF_8);
-        ErrorResponseHandler errorHandler = new GitHubErrorResponseHandler();
+        ErrorResponseHandler errorHandler = new AzureErrorResponseHandler();
 
         try {
-            errorHandler.handleErrorResponse(ResponseEntity.ok(json));
+            errorHandler.handleErrorResponse(ResponseEntity.status(HttpStatus.NON_AUTHORITATIVE_INFORMATION).build());
         } catch (RemoteException e) {
-            assertEquals("Bad credentials", e.getMessage());
+            assertEquals("203 NON_AUTHORITATIVE_INFORMATION", e.getMessage());
         }
     }
 }
\ No newline at end of file
diff --git a/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestMapperTest.java b/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestMapperTest.java
index b824b3a..65edf69 100644
--- a/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestMapperTest.java
+++ b/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestMapperTest.java
@@ -1,6 +1,6 @@
 package org.divulgit.azure.mergerequest;
 
-import org.divulgit.azure.pullrequest.GitHubPullRequest;
+import org.divulgit.azure.pullrequest.AzurePullRequest;
 import org.divulgit.azure.pullrequest.PullRequestResponseHandler;
 import org.divulgit.remote.exception.RemoteException;
 import org.divulgit.test.TestUtils;
@@ -19,7 +19,7 @@ class MergeRequestMapperTest {
         String json = TestUtils.getResourceAsString(this, "singleResponse.json");
         PullRequestResponseHandler handler = new PullRequestResponseHandler();
 
-        GitHubPullRequest mergeRequest = handler.handle200ResponseSingleResult(ResponseEntity.ok(json));
+        AzurePullRequest mergeRequest = handler.handle200ResponseSingleResult(ResponseEntity.ok(json));
 
         assertEquals(8, mergeRequest.getExternalId());
         assertEquals("Update README.md", mergeRequest.getTitle());
@@ -31,14 +31,14 @@ class MergeRequestMapperTest {
         String json = TestUtils.getResourceAsString(this, "multipleResponse.json");
         PullRequestResponseHandler handler = new PullRequestResponseHandler();
         
-        List<GitHubPullRequest> mergeRequests = handler.handle200ResponseMultipleResult(ResponseEntity.ok(json));
+        List<AzurePullRequest> mergeRequests = handler.handle200ResponseMultipleResult(ResponseEntity.ok(json));
 
         assertEquals(2, mergeRequests.size());
-        GitHubPullRequest firstMergeRequest = mergeRequests.get(0);
+        AzurePullRequest firstMergeRequest = mergeRequests.get(0);
         assertEquals(9, firstMergeRequest.getExternalId());
         assertEquals("Update HELP.md", firstMergeRequest.getTitle());
         assertEquals("decioluckow", firstMergeRequest.getAuthor());
-        GitHubPullRequest secondMergeRequest = mergeRequests.get(1);
+        AzurePullRequest secondMergeRequest = mergeRequests.get(1);
         assertEquals(8, secondMergeRequest.getExternalId());
         assertEquals("Update README.md", secondMergeRequest.getTitle());
         assertEquals("decioluckow", secondMergeRequest.getAuthor());
diff --git a/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestsCallerTest.java b/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestsCallerTest.java
index 629ea9e..e83fda1 100644
--- a/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestsCallerTest.java
+++ b/divulgit-remote-azure/src/test/java/org/divulgit/azure/mergerequest/MergeRequestsCallerTest.java
@@ -7,8 +7,8 @@ import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.divulgit.azure.error.GitHubErrorResponseHandler;
-import org.divulgit.azure.pullrequest.GitHubPullRequest;
+import org.divulgit.azure.error.AzureErrorResponseHandler;
+import org.divulgit.azure.pullrequest.AzurePullRequest;
 import org.divulgit.azure.pullrequest.PullRequestResponseHandler;
 import org.divulgit.azure.pullrequest.PullRequestsCaller;
 import org.divulgit.azure.AzureURLBuilder;
@@ -27,6 +27,7 @@ import org.springframework.http.ResponseEntity;
 import com.fasterxml.jackson.core.JsonProcessingException;
 
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.security.core.Authentication;
 
 @Slf4j
 @ExtendWith(MockitoExtension.class)
@@ -39,10 +40,10 @@ class MergeRequestsCallerTest {
     private Remote REMOTE = Remote.builder().url("localhost").build();
     private User USER = buildUser();
     private Project PROJECT = Project.builder().build();
-    private String TOKEN = "xpto";
+    private Authentication AUTHENTICATION = Mockito.mock(Authentication.class);
 
-    private GitHubPullRequest MERGE_REQUEST = GitHubPullRequest.builder().build();
-    private List<GitHubPullRequest> MERGE_REQUESTS = Arrays.asList(MERGE_REQUEST);
+    private AzurePullRequest MERGE_REQUEST = AzurePullRequest.builder().build();
+    private List<AzurePullRequest> MERGE_REQUESTS = Arrays.asList(MERGE_REQUEST);
 
     @Mock
     private HeaderAuthRestCaller gitHubRestCaller;;
@@ -51,7 +52,7 @@ class MergeRequestsCallerTest {
     private PullRequestResponseHandler successHandler;
 
     @Mock(answer = Answers.CALLS_REAL_METHODS)
-    private GitHubErrorResponseHandler errorResponseHandler;
+    private AzureErrorResponseHandler errorResponseHandler;
 
     @Mock
     private AzureURLBuilder urlBuilder;
@@ -62,11 +63,11 @@ class MergeRequestsCallerTest {
     @Test
     void retrieveMergeRequests() throws RemoteException, JsonProcessingException {
         Mockito.when(urlBuilder.buildPullRequestsURL(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.anyInt())).thenReturn("localhost");
-        Mockito.when(gitHubRestCaller.call(Mockito.anyString(), Mockito.anyString())).thenReturn(ResponseEntity.ok("{}"));
+        Mockito.when(gitHubRestCaller.call(Mockito.anyString(), Mockito.any(Authentication.class))).thenReturn(ResponseEntity.ok("{}"));
         Mockito.when(successHandler.handle200ResponseMultipleResult(Mockito.any())).thenReturn(MERGE_REQUESTS);
         Mockito.verify(errorResponseHandler, Mockito.never()).handleErrorResponse(ArgumentMatchers.<ResponseEntity<String>>any());
 
-        List<GitHubPullRequest> mergeRequests = caller.retrievePullRequests(REMOTE, USER, PROJECT, 0, TOKEN);
+        List<AzurePullRequest> mergeRequests = caller.retrievePullRequests(REMOTE, USER, PROJECT, 0, AUTHENTICATION);
 
         assertTrue(mergeRequests.get(0) == MERGE_REQUEST);
     }
@@ -75,11 +76,11 @@ class MergeRequestsCallerTest {
     void retrieveMergeRequestsPaginating() throws RemoteException, JsonProcessingException {
         Mockito.when(urlBuilder.buildPullRequestsURL(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.anyInt())).thenReturn("localhost");
         AtomicInteger page = new AtomicInteger();
-        Mockito.when(gitHubRestCaller.call(Mockito.anyString(), Mockito.anyString())).thenAnswer(i -> callPaginatingRest(page));
+        Mockito.when(gitHubRestCaller.call(Mockito.anyString(), Mockito.any(Authentication.class))).thenAnswer(i -> callPaginatingRest(page));
         Mockito.when(successHandler.handle200ResponseMultipleResult(Mockito.any())).thenReturn(MERGE_REQUESTS);
         Mockito.verify(errorResponseHandler, Mockito.never()).handleErrorResponse(ArgumentMatchers.<ResponseEntity<String>>any());
 
-        List<GitHubPullRequest> mergeRequests = caller.retrievePullRequests(REMOTE, USER, PROJECT, 0, TOKEN);
+        List<AzurePullRequest> mergeRequests = caller.retrievePullRequests(REMOTE, USER, PROJECT, 0, AUTHENTICATION);
 
         assertTrue(mergeRequests.get(0) == MERGE_REQUEST);
     }
@@ -96,10 +97,10 @@ class MergeRequestsCallerTest {
     @Test
     void retrieveError() throws RemoteException, JsonProcessingException {
         Mockito.when(urlBuilder.buildPullRequestsURL(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.anyInt())).thenReturn("localhost");
-        Mockito.when(gitHubRestCaller.call(Mockito.anyString(), Mockito.anyString())).thenReturn(ResponseEntity.status(401).body("{\"message\":\"Bad credentials\",\"documentation_url\":\"https://docs.github.com/rest\"}"));
+        Mockito.when(gitHubRestCaller.call(Mockito.anyString(), Mockito.any(Authentication.class))).thenReturn(ResponseEntity.status(401).body("{\"message\":\"Bad credentials\",\"documentation_url\":\"https://docs.github.com/rest\"}"));
 
         Exception exception = Assertions.assertThrows(RemoteException.class, () ->
-                caller.retrievePullRequests(REMOTE, USER, PROJECT, 0, TOKEN));
+                caller.retrievePullRequests(REMOTE, USER, PROJECT, 0, AUTHENTICATION));
         
         assertEquals("Bad credentials", exception.getMessage());
     }
@@ -107,4 +108,4 @@ class MergeRequestsCallerTest {
      private User buildUser() {
         return User.builder().build();
     }
-}
\ No newline at end of file
+}
diff --git a/divulgit-util/pom.xml b/divulgit-util/pom.xml
index 0ca62df..a794184 100644
--- a/divulgit-util/pom.xml
+++ b/divulgit-util/pom.xml
@@ -20,5 +20,9 @@
             <artifactId>divulgit-type</artifactId>
             <version>${project.version}</version>
         </dependency>
+        <dependency>
+            <groupId>org.json</groupId>
+            <artifactId>json</artifactId>
+        </dependency>
     </dependencies>
 </project>
\ No newline at end of file
